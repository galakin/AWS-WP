name: ci

on:
  push:
    branches: master

jobs:
  clear-cluster:
    name: Clear ECS Cluster
    runs-on: ubuntu-latest
    steps: 
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Clear Cluster 
        run: | 
          TASK=$(aws ecs list-tasks --cluster deploy-cluster)
          TASK=$(echo $TASK | sed 's/.*task\///')
          TASK=$(echo $TASK | sed 's/.[[:blank:]].*//')
          echo $TASK
          [[ -z "$TASK" ]] && echo "Nessun task trovato" || aws ecs stop-task --task $TASK --cluster deploy-cluster  
          #aws ecs delete-service --cluster deploy-cluster --service zp-wordpress

  build-n-push:
    name: Build and Push image to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitaction-test
          IMAGE_TAG: sql-${{ github.sha }}
        run: | 
          docker build -t gitaction-test -f Dockerfile-sql .
          docker tag ${ECR_REPOSITORY} $ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${ECR_REPOSITORY}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:sql-latest"
#
#Automatically deploy to ECS
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
           java-version: 11
#
      - name: Render Amazon ECS task definition for first container
        id: render-db-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:  
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          IMAGE_TAG: sql-latest
          ECR_REPOSITORY: gitaction-test
        with:
          task-definition: task-definition.json
          container-name: db  
          image: 370599928061.dkr.ecr.us-east-2.amazonaws.com/gitaction-test:sql-latest    
#
#Build WordPress Container and load it to ECS 
     
      - name: Build, tag, and push image to Amazon ECR
        id: build-image-2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitaction-test
          IMAGE_TAG: wp-${{ github.sha }}
        run: | 
          docker build -t gitaction-test -f Dockerfile-wp .
          docker tag ${ECR_REPOSITORY} ${ECR_REGISTRY}/${ECR_REPOSITORY}:$IMAGE_TAG
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:wp-latest"
    
      - name: Modify Amazon ECS task definition with second container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1 
        env:
          ECR_REPOSITORY: gitaction-test
          IMAGE_TAG: wp-latest
        with:
          task-definition: ${{ steps.render-db-container.outputs.task-definition }}
          container-name: wp
          image: 370599928061.dkr.ecr.us-east-2.amazonaws.com/gitaction-test:wp-latest

      - name: Deploy Amazon ECS task definition
        id: ecs-deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          cluster: deploy-cluster   

      - name: Load and deploy
        run: aws ecs create-service --cluster deploy-cluster --service-name zp-wordpress --task-definition zp-wp --desired-count=1
      
      - uses: act10ns/slack@v1
        name: Message with final status 
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#workflows'
        if: always()

  send-slack-message:
    name: Send Message on Slack
    runs-on: ubuntu-latest
    steps:
      - name: Send Message
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        uses: act10ns/slack@v1
        with:
          status: starting
          channel: '#general'
        if: always()
