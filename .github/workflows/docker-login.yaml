#TODO NOTE use aswdock Dockerfile
name: ci

on:
  push:
    branches: master

jobs:
  build-n-push-sql:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitaction-test
          IMAGE_TAG: sql-${{ github.sha }}
        run: | 
          docker build -t gitaction-test -f Dockerfile-sql .
          docker tag ${ECR_REPOSITORY} 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # Automatically deploy to ECS
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with: db
          java-version: 11

      - name: Render Amazon ECS task definition for first container
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:  
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          IMAGE_TAG: sql-${{ github.sha }}
          ECR_REPOSITORY: gitaction-test
        with:
          task-definition: task-definition.json
          container-name: wp
          image: 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: db         
          image: ${{ steps.build-image.outputs.image }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image-2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: gitaction-test
          IMAGE_TAG: wp-${{ github.sha }}
        run: | 
          docker build -t gitaction-test -f Dockerfile-wp .
          docker tag ${ECR_REPOSITORY} 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker push 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG} 
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
     
      # Automatically deploy to ECS
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-2
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: wp         
          image: ${{ steps.build-image-2.outputs.image }}
    
      - name: Render Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1 
        env:  
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} 
          IMAGE_TAG: sql-${{ github.sha }}
        with:
          task-definition: task-definition.json
          container-name: wp
          image: 370599928061.dkr.ecr.us-east-2.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG} 

