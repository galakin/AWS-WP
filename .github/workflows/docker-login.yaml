#TODO NOTE use aswdock Dockerfile
name: ci

on:
  push:
    branches: master

jobs:
  login:
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          version: latest
      - name: Builder instance name
        run: echo ${{ steps.buildx.outputs.name }}
      - name: Available platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

  qemu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Available platforms
        run: echo ${{ steps.qemu.outputs.platforms }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1i
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Prepare
        id: prepare
        run: |
          echo ::set-output name=docker_platforms::linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le,linux/s390x
          echo ::set-output name=docker_username::miigotu
          echo ::set-output name=docker_image::docker.io/miigotu/sickchill
          echo ::set-output name=version::${GITHUB_REF#refs/*/}
          echo ::set-output name=hash::${GITHUB_SHA}
      - name: Docker Login
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME}}
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${ DOCKERHUB_USERNAME }" --password-stdin docker.io
      - name: Run Buildx (master)
        if:  contains(steps.prepare.outputs.version, 'master')
        run: |
          docker buildx build \
            --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
            --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.hash }}" \
            --tag "${{ steps.prepare.outputs.docker_image }}:latest" \
            --file Dockerfile .
#    - name: Run Buildx (non-master)
#      if: success() && !contains(steps.prepare.outputs.version, 'master')
#      run: |
#        docker buildx build \
#          --output type=image,name=${{ steps.prepare.outputs.docker_image }},push=true \
#          --platform ${{ steps.prepare.outputs.docker_platforms }} \
#          --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.version }}" \
#         --tag "${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.hash }}" \
#          --file Dockerfile .    
  
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
